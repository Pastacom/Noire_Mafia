import asyncio
from enum import Enum

import discord

from GameSession.Player import Player
from GameSettings.Settings import Settings
from Roles.Civilian import Civilian
from Roles.Commissioner import Commissioner
from Roles.Doctor import Doctor
from Roles.Don import Don
from Roles.Mafia import Mafia
from Roles.Role import Role


class Session:
    class Status(Enum):
        MEETING_SPEECH = "meeting speech"
        DAY_SPEECH = "day speech"
        JUSTIFICATION_SPEECH = "justification speech"
        VOTE = "vote"
        CONDEMNED_SPEECH = "condemned speech"
        SINGLE_ROLE_TURN = "single role"
        TEAM_ROLE_TURN = "team role"

    turns_sequence = [Mafia, Don, Commissioner, Doctor]
    turns_status = [Status.TEAM_ROLE_TURN, Status.SINGLE_ROLE_TURN, Status.SINGLE_ROLE_TURN, Status.SINGLE_ROLE_TURN]
    messages_mapping = {"night": ["üíÄ **–ù–æ—á—å—é –±—ã–ª —É–±–∏—Ç –∏–≥—Ä–æ–∫ {}** üíÄ",
                                  "üíÄ **–ù–æ—á—å—é –±—ã–ª —É–±–∏—Ç –∏–≥—Ä–æ–∫ {} ‚Äî {}** üíÄ",
                                  " üíÄ",
                                  "üö´ **–ù–æ—á—å—é –Ω–∏–∫—Ç–æ –Ω–µ –±—ã–ª —É–±–∏—Ç** üö´"],
                        "day": ["üëÆ**–ò–≥—Ä–æ–∫ {} –±—ã–ª –ø–æ—Å–∞–∂–µ–Ω –≤ —Ç—é—Ä—å–º—É**üëÆ",
                                "üëÆ**–ò–≥—Ä–æ–∫ {} –±—ã–ª –ø–æ—Å–∞–∂–µ–Ω –≤ —Ç—é—Ä—å–º—É ‚Äî {}**üëÆ",
                                " üëÆ",
                                "üö´ **–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–∏–∫—Ç–æ –Ω–µ –±—ã–ª –ø–æ—Å–∞–∂–µ–Ω –≤ —Ç—é—Ä—å–º—É** üö´"],
                        "first_vote_iteration": ["**‚ö†Ô∏è–ù–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–±—Ä–∞–ª–æ —Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤.‚ö†Ô∏è\n"
                                                 "–ò–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–∞–≤–¥–∞–Ω–∏—è.\n"
                                                 "‚ö†Ô∏è–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –∑–∞–Ω–æ–≤–æ.‚ö†Ô∏è**"],
                        "second_vote_iteration": ["**‚ö†Ô∏è–ù–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–±—Ä–∞–ª–æ —Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤.‚ö†Ô∏è\n"
                                                  "–ì–æ–ª–æ—Å—É–π—Ç–µ, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ—Å–∞–¥–∏—Ç—å –≤—Å–µ—Ö –æ–±–≤–∏–Ω—è–µ–º—ã—Ö.\n"
                                                  "‚ö†Ô∏è–ò–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–π—Ç–µ.‚ö†Ô∏è**"]}

    def __init__(self, text_channel: discord.TextChannel, user_to_player, settings: Settings):
        self.text_channel = text_channel
        self.user_to_player = user_to_player
        self.settings = settings
        self.action_targets = []
        self.votes = {}
        self.killed = []
        self.turn = None
        self.status = None
        self.current_role = None
        self.timer_break = False

    def get_time(self):
        return self.settings.time_limits.get(self.status.value)

    async def mute(self, user, mute=True):
        if self.settings.mutes:
            try:
                await user.edit(mute=mute)
            except discord.HTTPException:
                pass

    async def mute_all(self, mute=True):
        if self.settings.mutes:
            for user in self.user_to_player.keys():
                try:
                    await user.edit(mute=mute)
                except discord.HTTPException:
                    pass

    async def end(self, interaction: discord.Interaction):
        if ((self.status == self.Status.MEETING_SPEECH or
             self.status == self.Status.DAY_SPEECH or
             self.status == self.Status.JUSTIFICATION_SPEECH or
             self.status == self.Status.CONDEMNED_SPEECH)
                and self.turn == interaction.user):
            self.timer_break = True
            await interaction.response.send_message("–í—ã –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ—é —Ä–µ—á—å.", ephemeral=True)
        else:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ—á—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.", ephemeral=True)

    async def timer(self, time):
        self.timer_break = False
        time_message = await self.text_channel.send(f"{time // 60}:{(time % 60) // 10}{(time % 60) % 10}")
        for i in range(time - 1, -1, -1):
            if self.timer_break:
                break
            await asyncio.sleep(1)
            try:
                await time_message.edit(content=f"{i // 60}:{(i % 60) // 10}{(i % 60) % 10}")
            except discord.NotFound:
                pass
        try:
            await time_message.delete()
        except discord.NotFound:
            pass

    async def day_timer(self, time, user):
        message = await self.text_channel.send(f"–í–∞—à —Ö–æ–¥ {user.mention}")
        await self.timer(time)
        try:
            await message.delete()
        except discord.NotFound:
            pass

    async def vote_timer(self, time, user):
        message = await self.text_channel.send(f"–ö—Ç–æ –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ –∏–≥—Ä–æ–∫–∞ {user.mention}?")
        await self.timer(time)
        try:
            await message.delete()
        except discord.NotFound:
            pass

    async def night_timer(self, time):
        message = await self.text_channel.send(f"–•–æ–¥–∏—Ç {self.current_role.name}")
        await self.timer(time)
        try:
            await message.delete()
        except discord.NotFound:
            pass

    async def tie_timer(self, time):
        message = await self.text_channel.send("–ì–æ–ª–æ—Å—É–π—Ç–µ, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—Ç–µ,"
                                               " —á—Ç–æ –≤—Å–µ –æ–±–≤–∏–Ω—è–µ–º—ã–µ –¥–æ–ª–∂–Ω—ã –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ —Ç—é—Ä—å–º–µ.")
        await self.timer(time)
        try:
            await message.delete()
        except discord.NotFound:
            pass

    async def action(self, interaction: discord.Interaction, target: discord.User):
        if target not in self.user_to_player:
            await interaction.response.send_message(f"–í –∏–≥—Ä–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º {target.mention}.",
                                                    ephemeral=True)
            return
        if self.user_to_player[target].status != Player.Status.ALIVE:
            await interaction.response.send_message(f"–ò–≥—Ä–æ–∫ —Å –∏–º–µ–Ω–µ–º {target.mention} —É–∂–µ –º–µ—Ä—Ç–≤.",
                                                    ephemeral=True)
            return
        player = self.user_to_player[interaction.user]
        if player.status != Player.Status.ALIVE:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –±—É–¥—É—á–∏ –º–µ—Ä—Ç–≤—ã–º.", ephemeral=True)
            return
        if not player.action_available:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.", ephemeral=True)
            return
        if player.action_performed:
            await interaction.response.send_message("–í—ã —É–∂–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                                                    ephemeral=True)
            return
        if self.status == Session.Status.TEAM_ROLE_TURN or self.status == Session.Status.SINGLE_ROLE_TURN:
            if player.role == Doctor:
                if target == interaction.user and player.special == 0:
                    await interaction.response.send_message("–î–æ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ª–µ—á–∏—Ç—å —Å–µ–±—è –ª–∏—à—å —Ä–∞–∑ –∑–∞ –∏–≥—Ä—É.",
                                                            ephemeral=True)
                    return
                if target == player.last_target:
                    await interaction.response.send_message("–î–æ–∫—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –ª–µ—á–∏—Ç—å –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —á–µ–ª–æ–≤–µ–∫–∞"
                                                            " –¥–≤–∞ —Ö–æ–¥–∞ –ø–æ–¥—Ä—è–¥.", ephemeral=True)
                    return
            player.last_target = target
        if self.current_role == Civilian:
            if target in self.action_targets:
                await interaction.response.send_message("–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.", ephemeral=True)
                return
            await self.text_channel.send(f"{interaction.user.mention} –≤—ã—Å—Ç–∞–≤–∏–ª –∏–≥—Ä–æ–∫–∞ {target.mention} –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.")
        self.action_targets.append(target)
        player.action_performed = True
        if issubclass(player.role, self.current_role):
            await self.current_role.role_info(interaction, target.mention, self.user_to_player[target])
        else:
            await player.role.role_info(interaction, target.mention, self.user_to_player[target])

    async def whisper(self, interaction: discord.Interaction, message: discord.Message):
        player = self.user_to_player[interaction.user]
        if player.status != Player.Status.ALIVE:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —à–µ–ø—Ç–∞—Ç—å, –±—É–¥—É—á–∏ –º–µ—Ä—Ç–≤—ã–º.", ephemeral=True)
            return
        if not player.action_available:
            await interaction.response.send_message("–î–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞, —á—Ç–æ–±—ã —à–µ–ø–Ω—É—Ç—å.", ephemeral=True)
            return
        if self.status != self.Status.TEAM_ROLE_TURN:
            await interaction.response.send_message("–®–µ–ø–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–Ω—ã–º —Ä–æ–ª—è–º –≤–æ –≤—Ä–µ–º—è –Ω–æ—á–∏.",
                                                    ephemeral=True)
            return
        await interaction.response.send_message("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ.", ephemeral=True)
        for user, active_player in self.user_to_player.items():
            if (active_player.role == self.current_role or
                    issubclass(active_player.role, self.current_role) and interaction.user != user):
                await user.send(f"{interaction.user.name}({player.role.name}): {message}")

    async def vote(self, interaction: discord.Interaction):
        player = self.user_to_player[interaction.user]
        if player.status != Player.Status.ALIVE:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –±—É–¥—É—á–∏ –º–µ—Ä—Ç–≤—ã–º.", ephemeral=True)
            return
        if self.status != self.Status.VOTE:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
                                                    ephemeral=True)
            return
        if player.action_performed:
            await interaction.response.send_message("–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.", ephemeral=True)
            return
        await interaction.response.send_message(f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.", ephemeral=True)
        player.action_performed = True
        self.votes[self.turn].append(interaction.user)

    async def prepare_night_turn(self):
        for player in self.user_to_player.values():
            if player.role == self.current_role or issubclass(player.role, self.current_role):
                player.action_available = True
                player.action_performed = False

    async def end_night_turn(self):
        for player in self.user_to_player.values():
            if player.role == self.current_role or issubclass(player.role, self.current_role):
                player.action_available = False

    async def mafia_turn(self):
        user_count = {}
        for user in self.action_targets:
            if user in user_count:
                user_count[user] += 1
            else:
                user_count[user] = 1
        top_users = sorted(user_count.items(), key=lambda x: x[1], reverse=True)[:2]
        if len(top_users) == 1 or (len(top_users) == 2 and top_users[0][1] != top_users[1][1]):
            self.killed.append(top_users[0][0])

    async def doctor_turn(self):
        for target in self.action_targets:
            for i in range(len(self.killed)):
                if target == self.killed[i]:
                    self.killed.pop(i)
                    break

    async def turn_result(self, case):
        if case == 0:
            await self.mafia_turn()
        elif case == 3:
            await self.doctor_turn()

    async def end_game(self):
        emb = discord.Embed(title="–†–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤:", colour=discord.Color.from_rgb(199, 109, 13))
        for user, player in self.user_to_player.items():
            emb.add_field(name=f"{user.name} ‚Äî {player.role.name}", value="", inline=False)
        await self.text_channel.send(embed=emb)

    async def win_condition(self):
        mafia = 0
        red = 0
        total = 0
        for player in self.user_to_player.values():
            if player.status == Player.Status.ALIVE:
                if player.role == Mafia or issubclass(player.role, Mafia):
                    mafia += 1
                elif player.role.team == Role.RoleTeam.RED:
                    red += 1
                total += 1
        if total == 0:
            await self.text_channel.send("**–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ù–∏—á—å—è. –í –≥–æ—Ä–æ–¥–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∂–∏–≤—ã—Ö** üíÄ")
            return True
        elif mafia >= red and mafia > 0:
            await self.text_channel.send("**–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∞ –º–∞—Ñ–∏–∏** üïµÔ∏è")
            return True
        elif mafia == 0 and red > 0:
            await self.text_channel.send("**–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∞ –º–∏—Ä–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞** üë•")
            return True
        return False

    async def kill_players(self, is_night=True):
        mapping_key = "night" if is_night else "day"
        if len(self.killed) == 0:
            await self.text_channel.send(Session.messages_mapping[mapping_key][3])
            return
        for user in self.killed:
            self.user_to_player[user].status = Player.Status.DEAD
            if self.settings.hide:
                await self.text_channel.send(Session.messages_mapping[mapping_key][0].format(user.mention))
            else:
                await self.text_channel.send(Session.messages_mapping[mapping_key][1]
                                             .format(user.mention, self.user_to_player[user].role.name))
            try:
                await user.edit(nick=user.name + Session.messages_mapping[mapping_key][2])
            except discord.Forbidden:
                pass
        self.killed.clear()

    async def day_speech(self):
        await self.text_channel.send("üó£Ô∏è **–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ** üó£Ô∏è")
        self.action_targets.clear()
        self.current_role = Civilian
        self.status = Session.Status.DAY_SPEECH
        for player in self.user_to_player.values():
            player.action_performed = False
        for user, player in self.user_to_player.items():
            if player.status == Player.Status.ALIVE:
                self.turn = user
                player.action_available = True
                await self.mute(user, False)
                await self.day_timer(self.get_time(), user)
                await self.mute(user)
                player.action_available = False
        self.turn = None

    async def tiebreaker(self):
        self.votes.clear()
        self.turn = self.action_targets[0]
        self.votes[self.turn] = []
        message = "–°–ª–µ–¥—É—é—â–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ—Å–∞–∂–µ–Ω—ã –≤ —Ç—é—Ä—å–º—É:\n"
        for i, user in enumerate(self.action_targets):
            message += f"{i + 1}. {user.mention}\n"
        await self.text_channel.send(message)
        for player in self.user_to_player.values():
            player.action_performed = False
        await self.tie_timer(self.get_time())
        not_voted = 0
        for player in self.user_to_player.values():
            if player.status == Player.Status.ALIVE and player.action_performed is False:
                not_voted += 1
        if len(self.votes[self.turn]) > not_voted:
            for user in self.action_targets:
                self.killed.append(user)

    async def count_votes(self, first_iteration=True):
        user_count = {}
        for user in self.action_targets:
            user_count[user] = len(self.votes[user])
        top_users = sorted(user_count.items(), key=lambda x: x[1], reverse=True)
        maximum = top_users[0][1]
        self.action_targets.clear()
        self.action_targets.append(top_users[0][0])
        for i in range(1, len(top_users)):
            if maximum > top_users[i][1]:
                break
            self.action_targets.append(top_users[i][0])
        if len(self.action_targets) == 1:
            self.killed.append(top_users[0][0])
            self.action_targets.clear()
        else:
            mapping_key = "first_vote_iteration" if first_iteration else "second_vote_iteration"
            await self.text_channel.send(Session.messages_mapping[mapping_key][0])

    async def voting(self):
        self.votes.clear()
        for user in self.action_targets:
            self.votes[user] = []
        self.status = Session.Status.VOTE
        for player in self.user_to_player.values():
            player.action_performed = False
        for user in self.action_targets:
            self.turn = user
            await self.vote_timer(self.get_time(), user)
            if user == self.action_targets[-1]:
                for not_voted_user, player in self.user_to_player.items():
                    if not player.action_performed and player.status == Player.Status.ALIVE:
                        player.action_performed = True
                        self.votes[self.turn].append(not_voted_user)
            message = "–ü—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª."
            if len(self.votes[self.turn]) != 0:
                message = f"–ü—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞ {self.turn.mention} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ {len(self.votes[self.turn])}:\n"
                for i, voted_player in enumerate(self.votes[self.turn]):
                    message += f"{i + 1}. {voted_player.mention}\n"
            await self.text_channel.send(message)
        self.turn = None

    async def justification_speech(self):
        await self.text_channel.send("üë®‚Äç‚öñÔ∏è **–û–±–≤–∏–Ω—è–µ–º—ã–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –æ–ø—Ä–∞–≤–¥–∞—Ç–µ–ª—å–Ω–∞—è —Ä–µ—á—å** üë®‚Äç‚öñÔ∏è")
        self.status = Session.Status.JUSTIFICATION_SPEECH
        for user in self.action_targets:
            self.turn = user
            await self.mute(user, False)
            await self.day_timer(self.get_time(), user)
            await self.mute(user)
        self.turn = None

    async def condemned_speech(self):
        await self.text_channel.send("üë®‚Äç‚öñÔ∏è **–ü—Ä–∏–≥–æ–≤–æ—Ä–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞** üë®‚Äç‚öñÔ∏è")
        self.status = Session.Status.CONDEMNED_SPEECH
        for user in self.killed:
            self.turn = user
            await self.mute(user, False)
            await self.day_timer(self.get_time(), user)
            await self.mute(user)
        self.turn = None

    async def day(self):
        await self.text_channel.send("‚è∞ **–ì–æ—Ä–æ–¥ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è** ‚è∞")
        await asyncio.sleep(5)
        await self.text_channel.send("üåá **–ù–∞—Å—Ç—É–ø–∞–µ—Ç –¥–µ–Ω—å** üåá")
        await self.kill_players()
        if await self.win_condition():
            await self.end_game()
            return
        await asyncio.sleep(5)
        await self.day_speech()
        if len(self.action_targets) == 0:
            await self.text_channel.send("üö´ **–ë—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤—ã—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ** üö´")
        else:
            await self.justification_speech()
            await self.voting()
            await self.count_votes()
            if len(self.action_targets) != 0:
                await self.justification_speech()
                await self.voting()
                await self.count_votes(False)
                if len(self.action_targets) != 0:
                    await self.tiebreaker()
            if len(self.killed) != 0:
                await self.condemned_speech()
            await self.kill_players(False)
            if await self.win_condition():
                await self.end_game()
                return
        await self.night()

    async def night(self):
        await self.text_channel.send("üí§ **–ì–æ—Ä–æ–¥ –∑–∞—Å—ã–ø–∞–µ—Ç** üí§")
        await asyncio.sleep(5)
        await self.text_channel.send("üåÉ **–ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å** üåÉ")
        for i, role in enumerate(Session.turns_sequence):
            self.action_targets.clear()
            self.current_role = role
            self.status = Session.turns_status[i]
            await self.prepare_night_turn()
            await self.night_timer(self.get_time())
            await self.end_night_turn()
            await self.turn_result(i)
        await self.day()

    async def meeting_day(self):
        self.status = self.Status.MEETING_SPEECH
        await self.mute_all()
        await self.text_channel.send("ü§ù **–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–µ–Ω—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤** ü§ù")
        for user in self.user_to_player.keys():
            self.turn = user
            await self.mute(user, False)
            await self.day_timer(self.get_time(), user)
            await self.mute(user)
        self.turn = None
        await self.night()

    async def start(self):
        await self.text_channel.send("üí† **–ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨** üí†")
        await self.meeting_day()
